/*
 * Home Project Blog Service
 * Blog for the Home Project engineers 
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.Post;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PostsApi
 */
@Ignore
public class PostsApiTest {

    private final PostsApi api = new PostsApi();

    
    /**
     * Create Post
     *
     * Create a new Post.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPostTest() throws ApiException {
        Post post = null;
        Post response = api.createPost(post);

        // TODO: test validations
    }
    
    /**
     * Get Post by ID
     *
     * Retrieves an existing Post associated with the specified ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPostTest() throws ApiException {
        Long id = null;
        Post response = api.getPost(id);

        // TODO: test validations
    }
    
    /**
     * Get posts
     *
     * Uses query keys to retrieve a subset of existing posts.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPostsTest() throws ApiException {
        Long id = null;
        Long tagId = null;
        String tagName = null;
        String authorName = null;
        String sort = null;
        Integer pageNum = null;
        Integer pageSize = null;
        List<Post> response = api.getPosts(id, tagId, tagName, authorName, sort, pageNum, pageSize);

        // TODO: test validations
    }
    
    /**
     * Remove Post
     *
     * Deletes a Post associated with a specified ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removePostTest() throws ApiException {
        Long id = null;
        api.removePost(id);

        // TODO: test validations
    }
    
    /**
     * Update Post
     *
     * Updates information on a Post that exists in the system by the specified ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePostTest() throws ApiException {
        Long id = null;
        Post post = null;
        Post response = api.updatePost(id, post);

        // TODO: test validations
    }
    
}
