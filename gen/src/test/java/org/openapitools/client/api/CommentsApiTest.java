/*
 * Home Project Blog Service
 * Blog for the Home Project engineers 
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Comment;
import org.openapitools.client.model.Error;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CommentsApi
 */
@Ignore
public class CommentsApiTest {

    private final CommentsApi api = new CommentsApi();

    
    /**
     * Create Comment
     *
     * Create a new Comment.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCommentTest() throws ApiException {
        Long postId = null;
        Comment comment = null;
        Comment response = api.createComment(postId, comment);

        // TODO: test validations
    }
    
    /**
     * Get Comment by ID.
     *
     * Retrieves an existing Comment associated with the specified ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCommentTest() throws ApiException {
        Long postId = null;
        Long id = null;
        Comment response = api.getComment(postId, id);

        // TODO: test validations
    }
    
    /**
     * Get comments
     *
     * Uses query keys to retrieve a subset of existing comments.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCommentsTest() throws ApiException {
        Long postId = null;
        Long id = null;
        String authorName = null;
        String sort = null;
        Integer pageNum = null;
        Integer pageSize = null;
        List<Comment> response = api.getComments(postId, id, authorName, sort, pageNum, pageSize);

        // TODO: test validations
    }
    
    /**
     * Remove Comment
     *
     * Deletes a Comment associated with a specified ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeCommentTest() throws ApiException {
        Long postId = null;
        Long id = null;
        api.removeComment(postId, id);

        // TODO: test validations
    }
    
    /**
     * Update Comment
     *
     * Updates information on a Comment that exists in the system by the specified ID and post ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCommentTest() throws ApiException {
        Long postId = null;
        Long id = null;
        Comment comment = null;
        Comment response = api.updateComment(postId, id, comment);

        // TODO: test validations
    }
    
}
